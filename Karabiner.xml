<?xml version="1.0"?>

<root>

  <!-- Symbolic linked to ~/Libray/Application Support/KeyRemap4Macbook/private.xml -->

  <vkopenurldef>
    <name>KeyCode::VK_OPEN_URL_SHELL_switch_vmware</name>
    <url type="shell">open -a 'VMware Fusion'</url>
  </vkopenurldef>

  <vkopenurldef>
    <name>KeyCode::VK_OPEN_URL_SHELL_switch_terminal</name>
    <url type="shell">open -a 'Terminal'</url>
  </vkopenurldef>

  <vkopenurldef>
    <name>KeyCode::VK_OPEN_URL_SHELL_switch_itunes</name>
    <url type="shell">open -a iTunes</url>
  </vkopenurldef>

  <vkopenurldef>
    <name>KeyCode::VK_OPEN_URL_SHELL_switch_kkbox</name>
    <url type="shell">open -a KKBOX</url>
  </vkopenurldef>

  <item>
    <name>Map Ctrl+Cmd+0 to switch to VMWare</name>
    <appendix>The keyboard convention assumes that we use Ctrl+Alt+DigitKey to switch workspace, </appendix>
    <appendix>and put fullscreen VMWare right to the last workspace.</appendix>
    <identifier>private.app_ctrl_cmd_0</identifier>
    <autogen>--KeyToKey-- KeyCode::KEY_0, VK_CONTROL | VK_COMMAND, KeyCode::VK_OPEN_URL_SHELL_switch_vmware</autogen>
  </item>

  <item>
    <name>Map Ctrl+Cmd+0 to switch to Terminal</name>
    <appendix>The keyboard convention assumes that we use Ctrl+Alt+DigitKey to switch workspace, </appendix>
    <appendix>and put fullscreen Terminal right to the last workspace.</appendix>
    <identifier>private.app_ctrl_cmd_0_terminal</identifier>
    <autogen>--KeyToKey-- KeyCode::KEY_0, VK_CONTROL | VK_COMMAND, KeyCode::VK_OPEN_URL_SHELL_switch_terminal</autogen>
  </item>

  <item>
    <name>Map Ctrl+Cmd+i/Backquote to switch to iTunes</name>
    <appendix>The keyboard convention assumes that we use Ctrl+Alt+DigitKey to switch workspace. </appendix>
    <appendix>and put fullscreen iTunes left to the first workspace.</appendix>
    <identifier>private.app_ctrl_cmd_backquote_itunes</identifier>
    <autogen>--KeyToKey-- KeyCode::BACKQUOTE, VK_CONTROL | VK_COMMAND, KeyCode::VK_OPEN_URL_SHELL_switch_itunes</autogen>
    <autogen>--KeyToKey-- KeyCode::I, VK_CONTROL | VK_COMMAND, KeyCode::VK_OPEN_URL_SHELL_switch_itunes</autogen>
  </item>

  <item>
    <name>Map Ctrl+Cmd+i/Backquote to switch to KKBOX</name>
    <appendix>The keyboard convention assumes that we use Ctrl+Alt+DigitKey to switch workspace. </appendix>
    <appendix>and put fullscreen iTunes left to the first workspace.</appendix>
    <identifier>private.app_ctrl_cmd_backquote_kkbox</identifier>
    <autogen>--KeyToKey-- KeyCode::BACKQUOTE, VK_CONTROL | VK_COMMAND, KeyCode::VK_OPEN_URL_SHELL_switch_kkbox</autogen>
    <autogen>--KeyToKey-- KeyCode::K, VK_CONTROL | VK_COMMAND, KeyCode::VK_OPEN_URL_SHELL_switch_kkbox</autogen>
  </item>

  <item>
    <name>Map Ctrl+Left/Right and Option+Left/Right in Mac apps (Windows style)</name>
    <identifier>private.remap.ctrl_left_right</identifier>
    <not>REMOTEDESKTOPCONNECTION,VIRTUALMACHINE,EMACS,XCODE</not>
    <autogen>--KeyToKey-- KeyCode::CURSOR_LEFT, VK_CONTROL, KeyCode::CURSOR_LEFT, ModifierFlag::OPTION_L</autogen>
    <autogen>--KeyToKey-- KeyCode::CURSOR_RIGHT, VK_CONTROL, KeyCode::CURSOR_RIGHT, ModifierFlag::OPTION_L</autogen>
  </item>

  <item>
    <name>Map Cmd+Tab to Ctrl+F4 globally</name>
    <appendix>(By Default, System Preferences -> Keyboard -> ^F4 -> Move focus to active or next window)</appendix>
    <appendix>(In Emacs, you may want to map Ctrl+F4 to (other-frame))</appendix>
    <appendix>(It is also helpful in VMWare. Cmd+Tab will be intercepted by VMware, but Ctrl+F4 can be configured in Linux Desktop)</appendix>
    <identifier>private.app_cmd_tab_to_ctrl_f4</identifier>
    <autogen>--KeyToKey-- KeyCode::TAB, VK_COMMAND, KeyCode::F4, ModifierFlag::CONTROL_L </autogen>
  </item>

  <item>
    <name>Map Meta+V/Ctrl+V to page up/down in Mac apps (Emacs style)</name>
    <identifier>private.app_ctrl_and_meta_v</identifier>
    <not>REMOTEDESKTOPCONNECTION,VIRTUALMACHINE,EMACS,TERMINAL,X11</not>
    <autogen>--KeyToKey-- KeyCode::V, VK_CONTROL, KeyCode::PAGEDOWN</autogen>
    <autogen>--KeyToKey-- KeyCode::V, VK_OPTION, KeyCode::PAGEUP</autogen>
  </item>

  <item>
    <name>Map Ctrl+Up/Down or M-p/n to moving three lines globally</name>
    <identifier>private.faster_up_down_three_lines</identifier>
    <autogen>--KeyToKey-- KeyCode::CURSOR_UP, VK_CONTROL | ModifierFlag::NONE,
    KeyCode::CURSOR_UP, KeyCode::CURSOR_UP, KeyCode::CURSOR_UP </autogen>
    <autogen>--KeyToKey-- KeyCode::CURSOR_DOWN, VK_CONTROL | ModifierFlag::NONE,
    KeyCode::CURSOR_DOWN, KeyCode::CURSOR_DOWN, KeyCode::CURSOR_DOWN</autogen>

    <autogen>--KeyToKey-- KeyCode::P, VK_OPTION | ModifierFlag::NONE,
    KeyCode::CURSOR_UP, KeyCode::CURSOR_UP, KeyCode::CURSOR_UP </autogen>
    <autogen>--KeyToKey-- KeyCode::N, VK_OPTION | ModifierFlag::NONE,
    KeyCode::CURSOR_DOWN, KeyCode::CURSOR_DOWN, KeyCode::CURSOR_DOWN</autogen>
  </item>

  <item>
    <name>Map Ctrl+p/n/f/b to emulate arrow key globally</name>
    <identifier>private.emacs_style_ctrl_p_n</identifier>
    <not>REMOTEDESKTOPCONNECTION,VIRTUALMACHINE,EMACS,TERMINAL,X11</not>
    <autogen>--KeyToKey-- KeyCode::P, VK_CONTROL | ModifierFlag::NONE,
    KeyCode::CURSOR_UP </autogen>
    <autogen>--KeyToKey-- KeyCode::N, VK_CONTROL | ModifierFlag::NONE,
    KeyCode::CURSOR_DOWN</autogen>
    <autogen>--KeyToKey-- KeyCode::F, VK_CONTROL | ModifierFlag::NONE,
    KeyCode::CURSOR_RIGHT </autogen>
    <autogen>--KeyToKey-- KeyCode::B, VK_CONTROL | ModifierFlag::NONE,
    KeyCode::CURSOR_LEFT</autogen>
  </item>

  <!-- Also suggested to use SharpKeys to map Command to Ctrl keys in Windows in -->
  <!-- VMWare -->
  <item>
    <name>Map Command+Space in VMWare to Ctrl+Space</name>
    <appendix>To enable IME in Windows</appendix>
    <identifier>private.app_vmware_map_cmd_space_to_ctrl_space</identifier>
    <only>REMOTEDESKTOPCONNECTION,VIRTUALMACHINE</only>
    <autogen>--KeyToKey-- KeyCode::SPACE, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::SPACE, ModifierFlag::CONTROL_L</autogen>
  </item>

  <item>
    <name>Map Command + [ ] and singlequote to switch window in GNU screen</name>
    <appendix>Use Command + bracket to switch tab in screen/tmux</appendix>
    <appendix> (Assume C-Backslash is configured as control key in .screenrc or .tmux-conf) </appendix>
    <identifier>private.app_terminal_vmware_map_special_keys_for_screen</identifier>
    <only>REMOTEDESKTOPCONNECTION,VIRTUALMACHINE,EMACS,TERMINAL,X11,GOOGLE_CHROME</only>
    <autogen>--KeyToKey-- KeyCode::BRACKET_RIGHT, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::BACKSLASH, ModifierFlag::CONTROL_L, KeyCode::N</autogen>
    <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::BACKSLASH, ModifierFlag::CONTROL_L, KeyCode::P</autogen>
    <autogen>--KeyToKey-- KeyCode::QUOTE, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::BACKSLASH, ModifierFlag::CONTROL_L, KeyCode::QUOTE |
    ModifierFlag::SHIFT_L </autogen>
  </item>

  <item>
    <name>Emulate X11 keys in Emacs terminal </name>
    <only>TERMINAL</only>
    <appendix>Illustrates how to emulate keys, in terminal mode, which are
    normally available in X11 only.</appendix>
    <identifier>private.app_emulate_x11_keys_in_terminal_emacs</identifier>
    <!-- ========== Buffer Control ========== -->
    <!-- s-0 => C-x 0 -->
    <autogen>--KeyToKey-- KeyCode::KEY_0, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::X, ModifierFlag::CONTROL_L, KeyCode::KEY_0 </autogen>
    <!-- s-1 => C-x 1 -->
    <autogen>--KeyToKey-- KeyCode::KEY_1, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::X, ModifierFlag::CONTROL_L, KeyCode::KEY_1 </autogen>
    <!-- s-2 => C-x 2 -->
    <autogen>--KeyToKey-- KeyCode::KEY_2, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::X, ModifierFlag::CONTROL_L, KeyCode::KEY_2 </autogen>
    <!-- s-3 => C-x 3 -->
    <autogen>--KeyToKey-- KeyCode::KEY_3, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::X, ModifierFlag::CONTROL_L, KeyCode::KEY_3 </autogen>
    <!-- s-} => C-x o -->
    <autogen>--KeyToKey-- KeyCode::BRACKET_RIGHT, VK_COMMAND | VK_SHIFT | ModifierFlag::NONE,
    KeyCode::X, ModifierFlag::CONTROL_L, KeyCode::O </autogen>
    <!-- s-{ => C-u -1 C-x o -->
    <autogen>--KeyToKey-- KeyCode::BRACKET_LEFT, VK_COMMAND | VK_SHIFT | ModifierFlag::NONE,
    KeyCode::U, ModifierFlag::CONTROL_L, KeyCode::MINUS, KeyCode::KEY_1,
    KeyCode::X, ModifierFlag::CONTROL_L, KeyCode::O
    </autogen>
    <!-- C-Tab -> C-x b -->
    <autogen>--KeyToKey-- KeyCode::TAB, VK_CONTROL,
    KeyCode::X, ModifierFlag::CONTROL_L, KeyCode::B
    </autogen>
    <!-- s-k => C-x k Ret -->
    <autogen>--KeyToKey-- KeyCode::K, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::X, ModifierFlag::CONTROL_L, KeyCode::K | ModifierFlag::NONE,
    KeyCode::RETURN</autogen>
    <!-- ========== Edit ========== -->
    <!-- C-/ => C-_ -->
    <autogen>--KeyToKey-- KeyCode::SLASH, VK_CONTROL | ModifierFlag::NONE,
    KeyCode::MINUS, ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_L </autogen>    
    <!-- s-z => C-_ -->
    <autogen>--KeyToKey-- KeyCode::Z, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::MINUS, ModifierFlag::CONTROL_L | ModifierFlag::SHIFT_L </autogen>
    <!-- s-backspace => C-a C-k -->
    <autogen>--KeyToKey-- KeyCode::DELETE, VK_COMMAND | ModifierFlag::NONE,
    KeyCode::A, ModifierFlag::CONTROL_L,
    KeyCode::K, ModifierFlag::CONTROL_L,
    </autogen>
    <!-- ========== Arrow Key ========== -->
    <!-- C-left => M-b -->
    <autogen>--KeyToKey-- KeyCode::CURSOR_LEFT, VK_CONTROL | ModifierFlag::NONE,
    KeyCode::B, ModifierFlag::OPTION_L </autogen>
    <!-- C-right => M-f -->
    <autogen>--KeyToKey-- KeyCode::CURSOR_RIGHT, VK_CONTROL | ModifierFlag::NONE,
    KeyCode::F, ModifierFlag::OPTION_L </autogen>
    <!-- ========== Misc ========== -->
    <!-- s-/ => C-c ; -->
    <autogen>--KeyToKey-- KeyCode::SLASH, VK_COMMAND,
    KeyCode::C, ModifierFlag::CONTROL_L, KeyCode::SEMICOLON</autogen>
    <!-- s-l => C-c l -->
    <autogen>--KeyToKey-- KeyCode::L, VK_COMMAND,
    KeyCode::C, ModifierFlag::CONTROL_L, KeyCode::L</autogen>
  </item>

</root>
