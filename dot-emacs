; -*- emacs-lisp -*-
;
; Tips:
;
; - Check Comment style at https://www.gnu.org/software/emacs/manual/html_node/elisp/Comment-Tips.html
;     1 semicolon - same line, after code
;     2 semicolons - the following line
;     3 semicolons - the following block
;     4 semicolons - major section
;
; - On Mac OS, use Homebrew Emacs package to replace the built-in version.
;

;;;; ---------------------------------------------------------------------------
;;;;                     Packages
;;;; ---------------------------------------------------------------------------

;;; Init package

(if (> emacs-major-version 24)  ; be compatible with old emacs
    (progn
      (require 'package)
      (package-initialize)
      (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))))

;; Instructions
;;
;; (package-refresh-contents)
;;
;; (package-install 'markdown-mode)
;; (package-install 'auto-complete)
;;
;; Remarks:
;; 1. Delete ~/.emacs.d/elpa if the installed package is outdated.
;; 2. 'package-install' modifies .emacs automatically.
;;    Revert its change and set 'package-selected-packges' in .emacs manually.


;;;; ---------------------------------------------------------------------------
;;;;                     Environments
;;;; ---------------------------------------------------------------------------

;;; Add emacs-goodies to load-path

(if (eq system-type 'gnu/linux)
    (setq emacs-goodies-path
          (replace-regexp-in-string "\n$" ""
                                    (shell-command-to-string
                                     "readlink -f ~/.emacs | xargs dirname"))))

(if (eq system-type 'darwin)
    (setq emacs-goodies-path
          (replace-regexp-in-string "\n$" ""
                                    ;; OS X readlink doesn't suport -f flag.
                                    (shell-command-to-string "(cd $(readlink -n ~/.emacs | xargs dirname); pwd)"))))

(add-to-list 'load-path emacs-goodies-path)

;;; Language environment

(set-language-environment 'UTF-8)

;;;; ---------------------------------------------------------------------------
;;;;                     Basic settings
;;;; ---------------------------------------------------------------------------

;; Disable backup and autosave
(setq make-backup-files nil)
(setq auto-save-default nil)

;; allow y/n instead of yes/no on prompts
(fset 'yes-or-no-p 'y-or-n-p)

;; show parenthesis
(show-paren-mode 1)

;; only want to split vertically.
(setq split-width-threshold nil)

;; don't ring
(setq ring-bell-function 'ignore)

;; truncate lines
(set-default 'truncate-lines t)

;; Narrow-to-region C-x n n and C-x n w
(put 'narrow-to-region 'disabled nil)

(setq column-number-mode t)

(setq fill-column 79)

(setq-default show-trailing-whitespace t)

;; Disable scrollbar, menubar, toolbar
(setq scroll-bar-mode nil)
(menu-bar-mode -1)
(if window-system
    (tool-bar-mode -1))

;; Don't indent with tab
(setq default-tab-width 2)  ; Google C++ Style
(setq-default indent-tabs-mode nil)

;;;; ---------------------------------------------------------------------------
;;;;                     Programming Major Modes
;;;; ---------------------------------------------------------------------------

;;; [C Mode]

;; This applies to C, C++, Objective-C, and Java
(add-hook 'c-mode-common-hook
          '(lambda ()
             (subword-mode 1)  ; Google C++ style uses MixedCase
             (outline-minor-mode)
             (c-toggle-auto-hungry-state -1)
             (c-toggle-auto-newline -1)
             (c-toggle-electric-state t)
             ;; ff-find-other-file will read #include lines, use
             ;; ff-get-other-file instead.
             (local-set-key  (kbd "M-h") 'ff-get-other-file) ;; be compatible with ST3
             (setq c-tab-always-indent t)
             ;; C++ style
             (setq comment-start "//" comment-end "")
             (local-set-key [(return)] 'newline-and-indent)
             (set (make-local-variable 'cc-other-file-alist)
                  '(("\\.m\\'" (".h"))
                    ("\\.mm\\'" (".h"))
                    ("\\.h\\'" (".m" ".mm" ".c" ".cpp" ".cc"))
                    ("\\.c\\'" (".h"))
                    ("\\.cpp\\'" (".h" ".hxx" ".hpp"))
                    ("\\.cc\\'" (".h" ".hxx" ".hpp"))
                    ("\\.cxx\\'" (".h" ".hxx"))
                    ("\\.hxx\\'" (".cc" ".cxx" ".cpp"))
                    ("\\.hpp\\'" (".cc" ".cxx" ".cpp"))
                    ))))

;; Set style for special projects.
(add-hook 'c-mode-common-hook
          '(lambda ()
             ;; Android (interfere with Java code)
             ;; (if (my-is-android-file-p)
             ;;     (progn
             ;;       (setq c-basic-offset 2)
             ;;       (setq-local fill-column 80)
             ;;       (setq-local whitespace-line-column 80)))
             (if (my-is-linux-file-p)
                 (progn
                   (c-set-style "linux")
                   (subword-mode 0)
                   (setq comment-start "/*" comment-end "*/")
                   (setq indent-tabs-mode t)))))

;;; [Python Mode]

(add-hook 'python-mode-hook
          (lambda ()
            (outline-minor-mode)
            (subword-mode)  ; Python uses MixedCase
            (setq tab-width 2)  ; python-mode overrides tab-width to 8
            (setq-local fill-column 79)
            (setq python-indent-offset 4)))

;;; [Java Mode]

(add-hook 'java-mode-hook
          (lambda ()
            (setq-local fill-column 100)))

;;; [Obj-C Mode]

(add-to-list 'auto-mode-alist '("\\.mm$" . objc-mode))

(add-hook 'objc-mode-hook
          '(lambda ()
             (subword-mode 1)  ; Obj-C uses MixedCase.
             ;; People don't wrap lines in Obj-C files.
             (setq truncate-lines nil)))

;;; [Swift Mode]

(when (require 'swift-mode nil 'noerror)
  (add-hook 'swift-mode-hook
            '(lambda ()
               (subword-mode 1)  ; Swift uses MixedCase.
               ;; People don't wrap lines in Swift.
               (setq truncate-lines nil))))

;;; [Go Mode]

;; See http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/
(when (require 'go-mode nil 'noerror)
  (progn
    (if (> emacs-major-version 24)
        ;; It's standard practice to run gofmt when saving.
        (add-hook 'before-save-hook 'gofmt-before-save))
    (add-hook 'go-mode-hook
              '(lambda ()
                 (subword-mode 1)  ; Go uses MixedCase.
                 (setq truncate-lines nil)  ; no line wrapping in Go
                 ))))

;;; [CUDA - C++ Mode]

(add-to-list 'auto-mode-alist '("\\.cu$" . c++-mode))

;;; [GN - Python Mode]

(add-to-list 'auto-mode-alist '("\\.gn$" . python-mode))

;;; [JavaScript - JS2 Mode]

(when (require 'js2-mode nil 'noerror)
  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
  (add-hook 'js2-mode-hook
            (lambda ()
            ;; Scan the file for nested code blocks
            (setq js2-basic-offset 2)
            (subword-mode 1)
            (setq truncate-lines nil))))

;;; [HTML - Web Mode]

(when (require 'web-mode nil 'noerror)
  (add-to-list 'auto-mode-alist '("\\.html\\'" . web-mode))
  (add-hook 'web-mode-hook
          '(lambda ()
             (setq truncate-lines nil)
             (setq web-mode-enable-auto-indentation nil))))

;;; [CSS Mode]

;; Support .less file.
(when (require 'css-mode nil t)
  (add-to-list 'auto-mode-alist '("\\.less$" . css-mode)))

(add-hook 'css-mode-hook
          (lambda ()
            (setq css-indent-offset 4)))

;;; [SGML Mode]

(require 'sgml-mode)
(define-key sgml-mode-map "\\r" 'newline-and-ident)

;;;; ---------------------------------------------------------------------------
;;;;                     Non-Programming Major Modes
;;;; ---------------------------------------------------------------------------

;;; [Outline Mode]

(add-hook 'outline-mode-hook '(lambda ()
                                ;; Collapse subnodes when opening outline file
                                (hide-sublevels 1)))

;;; [Markdown Mode]

(when (require 'markdown-mode nil t)
  (add-hook 'markdown-mode-hook
            (lambda ()
              (flyspell-mode)
              (outline-minor-mode)
              (setq truncate-lines nil)
              ;; Markdown mode override these keys. Set it back.
              (local-set-key "\M-p" '(lambda () (interactive) (previous-line 3)))
              (local-set-key "\M-n" '(lambda () (interactive) (next-line 3)))
              )))

;;; [Rebase Mode]

;; Disable git-rebase mode.
(setq auto-mode-alist (delete '("git-rebase-todo" . rebase-mode)
                              auto-mode-alist))

;;; [Dired Mode]

(require 'dired-x)

;; Use C-x M-o to toggle.
(setq-default dired-omit-mode t) ; this is buffer-local variable

;; Ignore dot files and system files on Mac.
(setq dired-omit-files
      (concat dired-omit-files
              "\\|^\\..+$\\|desktop.ini\\|__pycache__\\|.DS_Store\\|.git\\|Thumbs.db\\|Icon\015"))

;;; [Occur Mode]

;; Bind p, n keys to be consistent with grep mode.
(add-hook 'occur-mode-hook
          '(lambda ()
             (define-key occur-mode-map "p" '(lambda () (interactive)
                                               (occur-prev)
                                               (occur-mode-goto-occurrence-other-window)
                                               (other-window 1)))
             (define-key occur-mode-map "n"  '(lambda () (interactive)
                                                (occur-next)
                                                (occur-mode-goto-occurrence-other-window)
                                                (other-window 1)))))

;;; [Hexl Mode]

(setq hexl-bits 8)

;;;; ---------------------------------------------------------------------------
;;;;                     Minor Modes
;;;; ---------------------------------------------------------------------------

;;; [Auto Complete Mode]

;; Enable global auto-complete mode
(if (> emacs-major-version 24)  ; be compatible with old emacs
    (progn
      (setq package-selected-packages (quote (auto-complete)))
      (ac-config-default)
      (global-auto-complete-mode t)))

;;; [Which Function Mode]

(which-function-mode 1)
;; It has performance penalty in Python.
(setq which-func-modes '(python-mode c-mode c++-mode js2-mode java-mode go-mode))

;;; [Outline Minor Mode]

;; Use C-c C-c as prefix (We use C-c as key prefix in Outline Major Mode)
(add-hook 'outline-minor-mode-hook
          (lambda () (local-set-key "\C-c\C-c"
                                    outline-mode-prefix-map)))

;;; [VC mode]

;; Disable vc mode (which is unnecessarily complex)
;; (require 'vc)
;; (setq vc-handled-backends ())

;;; [Whitespace Minor Mode]

;; whitespace mode seems broken

;; (require 'whitespace)
;; (setq-default whitespace-style
;;               '(trailing tabs lines-tail))
;; (setq whitespace-line-column nil) ;; use fill-column instead
;; (setq whitespace-display-mappings
;;       '((space-mark   ?\    [?\xB7]     [?.])	; space
;;         (space-mark   ?\xA0 [?\xA4]     [?_])	; hard space
;;         ))

;;;; ---------------------------------------------------------------------------
;;;;                     Misc
;;;; ---------------------------------------------------------------------------

;;; [imenu]

;; (require 'imenu)
;; (setq imenu-auto-rescan nil)  ; speedup

;;; [Uniquify]

;; better renaming of buffers viewing files with same name in different
;; directories.
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward)

;;; [Recentf]

(require 'recentf)
(recentf-mode t)
(setq recentf-max-menu-items 1000)  ; with ido mode, we can leverage more items.

;;; [Mini-buffer]

;; Makes C-p/n work like Up/Down.
(define-key minibuffer-local-map (kbd "C-p") 'previous-line-or-history-element)
(define-key minibuffer-local-map (kbd "C-n") 'next-line-or-history-element)

;;;; ---------------------------------------------------------------------------
;;;;                     ido
;;;; ---------------------------------------------------------------------------

;;; Enable ido mode everywhere.

(require 'ido)
(ido-mode 'both)
(ido-everywhere 'both)

;; disabled for being buggy
;; (setq ido-enable-flex-matching t)

;;; Allow opening folder.

(setq ido-show-dot-for-dired t)

;;; Open in current window

;; Be consistent with standard Emacs convention
;; (especially when Emacs has multiple frames in different workspaces).
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)

;;; Display vertically

(setq ido-decorations (quote ("\n-> " "" "\n   " "\n   ..." "[" "]" " [No match]" " [Matched]" " [Not readable]" " [Too big]" " [Confirm]")))
(add-hook 'ido-setup-hook
          (lambda ()
            (define-key ido-completion-map [up] 'ido-prev-match)
            (define-key ido-completion-map (kbd "C-p") 'ido-prev-match)
            (define-key ido-completion-map [down] 'ido-next-match)
            (define-key ido-completion-map (kbd "C-n") 'ido-next-match)))

;;;; ---------------------------------------------------------------------------
;;;;                     Ido find files in source and recentf
;;;; ---------------------------------------------------------------------------

(require 'find-file)

(setq my-source-list '())

(defun my-scan-source ()
  "Build input for my-ido-find-file-in-sources"
  (interactive)
  (setq my-source-list (split-string (shell-command-to-string (concat
                  "find $(pwd) ! -path '*/.*/*' -and "
                  " \\( -name '*.cc' "
                  " -or -name '*.[ch]' "
                  " -or -name '*.hpp' "
                  " -or -name '*.cpp' "
                  " -or -name '*.java' "
                  " -or -name '*.py' "
                  " -or -name '*.mm' \\) ")))))

(defun my-ido-find-file-in-source ()
  (interactive)
  (let ((initial-input (thing-at-point 'filename)))
    (find-file
     (expand-file-name
      (ido-completing-read
       "Project file: " my-source-list nil nil initial-input)))))

(defun my-ido-recent-file ()
  "Find a recent file using Ido."
  (interactive)
  (let ((file
         (ido-completing-read "Choose recent file: " recentf-list nil t)))
    (when file
      (find-file file))))

;;;; ---------------------------------------------------------------------------
;;;;                     Code Search Integration
;;;; ---------------------------------------------------------------------------

(defun my-is-linux-file-p ()
  (let ((result nil))
    (dolist (pattern (list "kernel"))
      (when (and buffer-file-name
                 (string-match pattern buffer-file-name))
        (setq result t)))
    result))

(defun my-is-android-file-p ()
  (let ((result nil))
    (dolist (pattern (list "droid" ))
      (when (and buffer-file-name
                 (string-match pattern buffer-file-name))
        (setq result t)))
    result))

(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "google-chrome"
      browse-url-generic-args '("--disable-gpu"))

(setq my-chrome-workspace-index 9) ;; Where the workspace Chrome lives

;; 'filename' type is better than 'symbol' type in thing-at-point when
;; extracting C++ symbol because it's easy to customize, and it includes colon
;; char (:).

;; Hacky way to override default behavior.
(setq thing-at-point-file-name-chars "[:alnum:]_.:")

(setq my-linux-code-search-pattern "http://lxr.free-electrons.com/ident?v=3.14&i=%s")

(setq my-android-code-search-pattern
      "https://www.google.com.tw/webhp?ion=1&espv=2&ie=UTF-8#q=aosp %s")

(setq my-default-code-search-pattern
      "https://code.google.com/p/chromium/codesearch#search/&q=%s&sq=package:chromium&type=cs")

(defun my-switch-workspace-chrome ()
  (interactive)
  ;; seems wmctrl is no longer needed.
  ;;(shell-command (format "wmctrl -s %d" my-chrome-workspace-index)))
  )

(defun my-code-search (keyword)
  "Search keyword in Chromium code search"
  (interactive (list
                (read-string "Search: " (thing-at-point 'filename) nil nil)))
  (browse-url
   (format
    (cond ((my-is-linux-file-p) my-linux-code-search-pattern)
          ((my-is-android-file-p) my-android-code-search-pattern)
          (t my-default-code-search-pattern))
    keyword))
  (my-switch-workspace-chrome))

(defun my-stl-doc (stl)
  (interactive (list
                (read-string "STL: " "" nil nil)))
  (browse-url (format
               "http://www.cplusplus.com/%s" stl))
  (my-switch-workspace-chrome))

;;;; ---------------------------------------------------------------------------
;;;;                     Functions for simple text editing
;;;; ---------------------------------------------------------------------------

; Insert <a href>
(defun my-insert-ahref-tag ()
  (interactive)
  (insert-string "<a href=\"\"></a>")
  (backward-char 6))

(defun my-kernel-style ()
  "Use buffer-local linux kernel style"
  (interactive)
  (c-set-style "linux")
  (setq indent-tabs-mode t))

(defalias 'my-linux-style 'my-kernel-style)

; Insert current date
(defun my-insert-date ()
  (interactive)
  (insert-string (format-time-string "%Y-%m-%d")))

; Insert current time
(defun my-insert-time ()
  (interactive)
  (insert-string (format-time-string "%Y-%m-%d %H:%M")))

(defun my-disable-paste-indent ()
  (interactive)
  (electric-indent-mode -1))

(defun my-kill-start-of-line ()
  "kill from point to start of line"
  (interactive)
  (kill-line 0))

(defun my-indent ()
  "indent to right 2 spaces"
  (interactive)
  (indent-rigidly (region-beginning) (region-end) c-basic-offset))

(defun my-unindent ()
  "indent to left 2 spaces"
  (interactive)
  (indent-rigidly (region-beginning) (region-end) -2))

(defun my-indent-buffer ()
  (interactive)
  (indent-region (point-min) (point-max)))

(defun my-reload-file ()
  (interactive)
  ;; Only prompt if buffer is modified.
  (revert-buffer t (not (buffer-modified-p)) t))

;; Copied from
;; http://stackoverflow.com/questions/9688748/emacs-comment-uncomment-current-line
(defun my-comment-or-uncomment-region-or-line ()
    "Comments or uncomments the region or the current line if there's no active region."
    (interactive)
    (let (beg end)
        (if (region-active-p)
            (setq beg (region-beginning) end (region-end))
            (setq beg (line-beginning-position) end (line-end-position)))
        (comment-or-uncomment-region beg end)
        (next-line)))

;;;; ---------------------------------------------------------------------------
;;;;                     Functions for more tools
;;;; ---------------------------------------------------------------------------

(defun my-clear-recentf ()
  (interactive)
  (delete-file "~/.emacs.d/recentf")
  (setq recentf-list ()))

(defun my-grep (command)
  "look for string at point in files recursively starting from the work directory"
  (interactive (list
                (read-string "Run: "
                             (format
                              (concat
                               ;; Manual modify from -name '*' to, for example, '*.py' in minibuffer
                               ;; to narrow down file pattern.
                               ;; Ignore hidden files (ex: .git, .static .vscode .env)
                               "find . -name '*' ! -path '*/.*/*' ! -path '*/out*/*'  "
                               ;; Ignore program artifacts
                               " ! -name '*.sqlite3' ! -name '*.pyc' ! -name '*.o' "
                               ;; Ignore editor output.
                               " ! -name '*.sublime-*' ! -name 'TAGS' "
                               " ! -name '*.so*' ! -name '*.a' ! -name '*.mo' "
                               " -type f -print0 | "
                               "xargs -0 fgrep -inH -e %s")
                              (thing-at-point 'filename))
                             nil
                             nil)))
    (grep command))

(defun my-count-lines ()
  "Count lines of C++ and Python code"
  (interactive)
  ;;; exclude 'static' folder because we usually collect static files there.
  (shell-command (concat "find . ! -path '*/.*/*' -and ! -path '*/vendor/*' -and "
                         " \\( -name '*.proto' "
                         " -or -name '*.cc' "
                         " -or -name '*.[ch]' -or -name '*.cpp' "
                         " -or -name '*.sh' "
                         " -or -name '*.lua' "
                         " -or -name '*.java' -or -name '*.py' "
                         " -or -name '*.php' -or -name '*.rb' "
                         " -or -name '*.less' -or -name '*.html' -or -name '*.js' "
                         " -or -name '*.mm' -or -name '*.m' -or -name '*.swift' "
                         " -or -name '*.go' "
                         " \\) -print0 | xargs -0 cat | wc -l")))

(defun my-occur (word)
  "look for word at point in files ending by .cpp and .h
   recursively starting from the work directory"
  (interactive (list
                (read-string (format "occur (%s): " (thing-at-point 'filename))
                             (thing-at-point 'filename)
                             nil
                             (thing-at-point 'filename))))
  (occur word))

;; Copied from https://code.google.com/p/chromium/wiki/Emacs
(defun my-summarize-indentation-at-point ()
  "Echo a summary of how one gets from the left-most column to
   POINT in terms of indentation changes."
  (interactive)
  (save-excursion
    (let ((cur-indent most-positive-fixnum)
          (trace '()))
      (while (not (bobp))
        (let ((current-line (buffer-substring (line-beginning-position)
                                              (line-end-position))))
          (when (and (not (string-match "^\\s-*$" current-line))
                     (< (current-indentation) cur-indent))
            (setq cur-indent (current-indentation))
            (setq trace (cons current-line trace))
            (if (or (string-match "^\\s-*}" current-line)
                    (string-match "^\\s-*else " current-line)
                    (string-match "^\\s-*elif " current-line))
                (setq cur-indent (1+ cur-indent)))))
        (forward-line -1))
      (message "%s" (mapconcat 'identity trace "\n")))))

;;;; ---------------------------------------------------------------------------
;;;;                     Key bindings for window management
;;;; ---------------------------------------------------------------------------

;;; Mac style window management on X11

(global-set-key (kbd "<C-s-268632070>") 'my-maximize-frame)
(global-set-key (kbd "s-n") 'make-frame)
(global-set-key (kbd "s-w") 'delete-frame)


;;;; ---------------------------------------------------------------------------
;;;;                     Key bindings for standard text editing
;;;; ---------------------------------------------------------------------------

;;; Mac style text editing on X11

(global-set-key (kbd "s-z") 'undo)
(global-set-key (kbd "s-x") 'kill-region)
(global-set-key (kbd "s-c") 'kill-ring-save)
(global-set-key (kbd "s-v") 'yank)
(global-set-key (kbd "s-a") 'mark-whole-buffer)
(global-set-key (kbd "s-/") 'my-comment-or-uncomment-region-or-line)  ; Xcode style

(global-set-key (quote [s-up]) 'beginning-of-buffer)
(global-set-key (quote [s-down]) 'end-of-buffer)
(global-set-key (quote [s-left]) 'move-beginning-of-line)
(global-set-key (quote [s-right]) 'move-end-of-line)
(global-set-key (quote [s-backspace]) 'my-kill-start-of-line)

;;; Mac style Option+Left and Option+Right on Terminal and X11

(global-set-key "\M-[1;3C" 'forward-word)
(global-set-key "\M-[1;3D" 'backward-word)

;;; Linux style (Ctrl+Shift+C/V for copy/paste in Gnome Terminal)

(global-set-key (kbd "C-S-c") 'kill-ring-save)
(global-set-key (kbd "C-S-v") 'yank)

;;;; ---------------------------------------------------------------------------
;;;;                     Key bindings for custom text editing
;;;; ---------------------------------------------------------------------------

;;; Xterm mouse mode

(global-set-key "\C-cx" 'xterm-mouse-mode)

;;; My favorite way to jump 3 lines at a time.

(global-set-key "\M-p" '(lambda () (interactive) (previous-line 3)))
(global-set-key "\M-n" '(lambda () (interactive) (next-line 3)))

;;; Select all

(global-set-key "\C-ca" 'mark-whole-buffer)

;;; Comment

(global-set-key "\C-c;" 'my-comment-or-uncomment-region-or-line)
(global-set-key "\C-c/" 'my-comment-or-uncomment-region-or-line)

;;; Indent region

(global-set-key "\C-c>" 'my-indent)
(global-set-key "\C-c<" 'my-unindent)
(global-set-key (kbd "C-c SPC") '(lambda () (interactive) (insert "          ")))

;;; Insert text

;; Insert tab character (C-c TAB)
(global-set-key "\C-c\C-i"
  '(lambda nil nil (interactive) (insert-tab)))

;; Insert boilerplates
;; (global-set-key "\C-ch" 'my-insert-ahref-tag)

;;;; ---------------------------------------------------------------------------
;;;;                     Key binding for split window
;;;; ---------------------------------------------------------------------------

(global-set-key "\C-x[" '(lambda () (interactive) (other-window -1)))
(global-set-key  "\C-x]" '(lambda () (interactive) (other-window 1)))

;;;; ---------------------------------------------------------------------------
;;;;                     Key binding for code navigation
;;;; ---------------------------------------------------------------------------

;;; Seach in local sources

(global-set-key "\C-cb" 'my-summarize-indentation-at-point) ; back track
(global-set-key "\C-cg" 'my-grep)
(global-set-key "\C-co" 'my-occur)

;;; ido for imenu

(require 'idomenu)
(global-set-key "\C-ci" 'idomenu)

;;; Search on cloud

(global-set-key "\C-cS" 'my-stl-doc)

;;;; ---------------------------------------------------------------------------
;;;;                     Key bindings to file opening
;;;; ---------------------------------------------------------------------------

;;; Ido mode

(global-set-key "\C-cs" 'my-scan-source)
(global-set-key "\C-cf" 'my-ido-find-file-in-source)
(global-set-key "\C-cr" 'my-ido-recent-file)

;;; Misc

(global-set-key "\C-c\C-r" 'my-reload-file)

;; Open the current folder. It's very commonly used. (equivalent to C-x C-f .)
(global-set-key "\C-x." '(lambda () (interactive) (find-file ".")))

;;;; ---------------------------------------------------------------------------
;;;;                     Key bindings to launch applications
;;;; ---------------------------------------------------------------------------

(global-set-key "\C-c!" 'shell-command)  ; M-! doesn't work in Chromium ssh
(global-set-key "\C-cm" 'manual-entry)
(global-set-key "\C-cc" 'calculator)
(global-set-key "\C-cd" 'calendar)
(global-set-key "\C-ct" '(lambda () (interactive) (ansi-term  "/bin/bash" "Term")))

;;;; ---------------------------------------------------------------------------
;;;;                     Platform-dependent settings
;;;; ---------------------------------------------------------------------------

(if window-system
    (progn
      (blink-cursor-mode -1)
      ;; Maximize all frames by default.
      (modify-all-frames-parameters '((fullscreen . maximized))))
  (progn
    ))

(if (eq system-type 'gnu/linux)
    (progn
      (defun my-maximize-frame (&optional f)
        (interactive)
        ;; only work with GTK+ Emacs (Emacs must be configured with --with-x-toolkit=gtk)
        (set-frame-parameter f 'fullscreen 'maximized))

      ;; This doesn't work. Don't know why.
      ;; (add-hook 'after-make-frame-functions
      ;;           '(lambda ()
      ;;             (shell-command "wmctrl -r :ACTIVE: -btoggle,fullscreen")))

      ;; Set the best Linux programming font - DejaVu Sans Mono.
      (defun my-set-font (font-height)
	(custom-set-faces
	 `(default ((t (:inherit nil :stipple nil :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height ,(* font-height 10) :width normal :family "DejaVu Sans Mono" :embolden t))))))

      ;; Shell in dired mode.
      (setq dired-guess-shell-alist-user
            `(
              (".rar" "unrar x")
              (".pdf" "evince")
              (".avi" "gxine")
              (".jpg" "eog")
              (".bmp" "eog")
              (".csv" "xdg-open")
              (".xlsx" "xdg-open")
              (".xls" "xdg-open")
              (".htm" "google-chrome")
              (".html" "google-chrome")
              ))
      ))

(if (eq system-type 'darwin)
    (progn
      (defun my-maximize-frame (&optional f)
        (interactive)
        (toggle-frame-fullscreen)) ;; This method is only available after Emacs 24.4

      ;; Set the best Mac programming font - Menlo.
      (defun my-set-font (height)
        ;; (let ((new-height (ffloor (* height 0.7))))  ;; Somehow the font level between Mac and Linux is different.
        (set-frame-font
         (format "-apple-Menlo-medium-normal-normal-*-%d-*-*-*-m-0-*-1" height)
         t))

      ;; Use Option key as Meta key (consistent with Mac key bindings).
      (setq mac-option-modifier 'meta)

      ;; PC style handling of Home/End key.
      (global-set-key (kbd "<home>") 'move-beginning-of-line)
      (global-set-key (kbd "<end>") 'move-end-of-line)

      ;; "Ctrl+F4" in Mac is similar to "Alt-Tab" within the same workspace.
      (global-set-key (kbd "<C-f4>") 'other-frame)

      ;; Shell in dired mode.
      (setq dired-guess-shell-alist-user
            `(
              (".rar" "unrar x")
              (".jar" "jar xvf")
              (".pdf" "open -a Preview")
              (".jpg" "open -a Preview")
              (".png" "open -a Preview")
              (".md" "open -a Markoff")
              (".xcodeproj" "open -a Xcode")
              (".webloc" "open -a 'Google Chrome'")
              (".htm" "open -a 'Google Chrome'")
              (".html" "open -a 'Google Chrome'")
              ))

      ;; when launching Emacs from external program such as XCode
      (setq ns-pop-up-frames 'nil)

      ))

;;;; ---------------------------------------------------------------------------
;;;;                     Wombat theme
;;;; ---------------------------------------------------------------------------

;;; Wombat seems very good for both window and terminal.
(load-theme 'wombat)

;; Force a darker background color
(let ((class '((class color) (min-colors 89))))
  (custom-theme-set-faces
   'wombat
   `(default ((,class (:background "#171717" :foreground "#f6f3e8"))))))

;;;; ---------------------------------------------------------------------------
;;;;                     S +/- to change font size in window mode
;;;; ---------------------------------------------------------------------------

(setq my-font-size 20)
(setq my-default-font-size 20)

(global-set-key (kbd "s-0")
                '(lambda () (interactive) ;
                   (progn
                     (setq my-font-size my-default-font-size)
                     (my-set-font my-font-size))))

(global-set-key (kbd "s-=")
                '(lambda () (interactive)
                   (progn
                     (setq my-font-size (+ my-font-size 2))
                     (my-set-font my-font-size))))

(global-set-key (kbd "s--")
                '(lambda () (interactive)
                   (progn
                     (setq my-font-size (- my-font-size 2))
                     (my-set-font my-font-size))))

(add-hook 'after-make-frame-functions
          '(lambda (frame) (interactive)
             (my-set-font my-font-size)))

(if window-system
    (progn
      (my-set-font my-default-font-size)))

;;;; ---------------------------------------------------------------------------
;;;;                     local-setting.el
;;;; ---------------------------------------------------------------------------

;; After Emacs 25, ~/.emacs.d is not recommended for default load-path.
(add-to-list 'load-path "~/.emacs.d/lisp")

(let ((local-init-file "~/.emacs.d/lisp/local-setting.el"))
  (if (file-readable-p local-init-file)
      (load-file local-init-file)))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify))))
